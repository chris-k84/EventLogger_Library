<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TcMessage_Ext" Id="{3f852920-143f-462f-9e3f-f9ba6d6e0946}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcMessage_Ext IMPLEMENTS ITcMessage_Ext
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    fbMsg : FB_TcMessage; 
	_loggerLevel : TcEventSeverity := TcEventSeverity.Info;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{54f69f22-7c8d-451c-a615-37d4ec391c23}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbMsg.CreateEx(TC_Events.Tracing.LogMessage, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Send" Id="{695ccdb3-d080-4ce2-9eb6-6d31e250fe47}">
      <Declaration><![CDATA[METHOD PUBLIC Send : HRESULT
VAR_INPUT
	Message : T_MaxString;
END_VAR
VAR
	CreateString : HRESULT;
	AddStringResult : I_TcArguments;
	SendResult : HRESULT;
	ReleaseResult : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbMsg.ipArguments.Clear();
fbMsg.ipArguments.AddString(Message);
SendResult := THIS^.fbMsg.Send(0);
IF SendResult = S_OK THEN
	Send := 1;
ELSE
	Send := -1;
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>